name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  AWS_REGION: us-east-1

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier check
        run: npm run format:check

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: personalpod_test
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: personalpod_test
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6380:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5433

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Build Docker image
        run: |
          docker build -t personalpod-api:${{ github.sha }} -f api/Dockerfile ./api
          docker build -t personalpod-nginx:${{ github.sha }} -f nginx/Dockerfile ./nginx

      - name: Save Docker images
        run: |
          docker save personalpod-api:${{ github.sha }} | gzip > api-image.tar.gz
          docker save personalpod-nginx:${{ github.sha }} | gzip > nginx-image.tar.gz

      - name: Upload Docker images
        uses: actions/upload-artifact@v3
        with:
          name: docker-images
          path: |
            api-image.tar.gz
            nginx-image.tar.gz
          retention-days: 1

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: development
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Docker images
        uses: actions/download-artifact@v3
        with:
          name: docker-images

      - name: Load Docker images
        run: |
          docker load < api-image.tar.gz
          docker load < nginx-image.tar.gz

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push images to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker tag personalpod-api:$IMAGE_TAG $ECR_REGISTRY/personalpod-api:$IMAGE_TAG
          docker tag personalpod-api:$IMAGE_TAG $ECR_REGISTRY/personalpod-api:latest
          docker push $ECR_REGISTRY/personalpod-api:$IMAGE_TAG
          docker push $ECR_REGISTRY/personalpod-api:latest

      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster personalpod-dev \
            --service personalpod-api \
            --force-new-deployment

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Docker images
        uses: actions/download-artifact@v3
        with:
          name: docker-images

      - name: Load Docker images
        run: |
          docker load < api-image.tar.gz
          docker load < nginx-image.tar.gz

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push images to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker tag personalpod-api:$IMAGE_TAG $ECR_REGISTRY/personalpod-api:$IMAGE_TAG
          docker tag personalpod-api:$IMAGE_TAG $ECR_REGISTRY/personalpod-api:stable
          docker push $ECR_REGISTRY/personalpod-api:$IMAGE_TAG
          docker push $ECR_REGISTRY/personalpod-api:stable

      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster personalpod-prod \
            --service personalpod-api \
            --force-new-deployment

      - name: Create deployment tag
        run: |
          git tag -a "deploy-${{ github.sha }}" -m "Production deployment ${{ github.sha }}"
          git push origin "deploy-${{ github.sha }}"